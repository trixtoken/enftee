
//
// ETC
// --------------------------

@mixin box-sizing($value) {
	-webkit-box-sizing: $value;
	-moz-box-sizing: $value;
	box-sizing: $value;
}



//
// Typography
// --------------------------

@mixin box-bg-color($bg-color, $text-color, $padding-size) {
	background: $bg-color;
	color: $text-color;
	padding: $padding-size;
}



//
// Grid
// --------------------------

@mixin make-grid-columns($i: 1, $list: ".col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}") {
	@for $i from (1 + 1) through $grid-columns {
		$list: "#{$list}, .col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}";
	}
	#{$list} {
		position: relative;
		min-height: 1px;
		padding-left:  ceil(($grid-margin / 2));
		padding-right: floor(($grid-margin / 2));
	}
}

@mixin float-grid-columns($class, $i: 1, $list: ".col-#{$class}-#{$i}") {
	@for $i from (1 + 1) through $grid-columns {
		$list: "#{$list}, .col-#{$class}-#{$i}";
	}
	#{$list} {
		float: left;
	}
}

@mixin loop-grid-columns($columns, $class, $type) {
	@for $i from 0 through $columns {
		@include calc-grid-column($i, $class, $type);
	}
}

@mixin calc-grid-column($index, $class, $type) {
	@if ($type == width) and ($index > 0) {
		.col-#{$class}-#{$index} {
			width: percentage(($index / $grid-columns));
		}
	}
	@if ($type == push) and ($index > 0) {
		.col-#{$class}-push-#{$index} {
			left: percentage(($index / $grid-columns));
		}
	}
	@if ($type == push) and ($index == 0) {
		.col-#{$class}-push-0 {
			left: auto;
		}
	}
	@if ($type == pull) and ($index > 0) {
		.col-#{$class}-pull-#{$index} {
			right: percentage(($index / $grid-columns));
		}
	}
	@if ($type == pull) and ($index == 0) {
		.col-#{$class}-pull-0 {
			right: auto;
		}
	}
	@if ($type == offset) {
		.col-#{$class}-offset-#{$index} {
			margin-left: percentage(($index / $grid-columns));
		}
	}
}

// Create grid for specific class
@mixin make-grid($class) {
	@include float-grid-columns($class);
	@include loop-grid-columns($grid-columns, $class, width);
	@include loop-grid-columns($grid-columns, $class, pull);
	@include loop-grid-columns($grid-columns, $class, push);
	@include loop-grid-columns($grid-columns, $class, offset);
}



//
// Table
// --------------------------

@mixin table-row-variant($state, $background) {
	.table > thead > tr,
	.table > tbody > tr,
	.table > tfoot > tr {
		> td.#{$state},
		> th.#{$state},
		&.#{$state} > td,
		&.#{$state} > th {
			background-color: $background;
		}
	}

	.table-hover > tbody > tr {
		> td.#{$state}:hover,
		> th.#{$state}:hover,
		&.#{$state}:hover > td,
		&:hover > .#{$state},
		&.#{$state}:hover > th {
			background-color: darken($background, 5%);
		}
	}
}


//
// Responsive
// --------------------------

@mixin responsive-visibility($parent) {
	#{$parent} {
		display: block !important;
	}
	table#{$parent} {
		display: table !important;
	}
	tr#{$parent} {
		display: table-row !important;
	}
	th#{$parent}, td#{$parent} {
		display: table-cell !important;
	}
}

// [converter] $parent hack
@mixin responsive-invisibility($parent) {
	#{$parent} {
		display: none !important;
	}
}